@model BabyStore.ViewModels.ProductIndexViewModel
@using PagedList.Mvc;
<script>
    function myFunction() {
        // Declare variables
        var input, filter, table, tr, td1, td2, td3, i;
        input = document.getElementById("myInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("myTable");
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 0; i < tr.length; i++) {
            td1 = tr[i].getElementsByTagName("td")[0];
            td2 = tr[i].getElementsByTagName("td")[1];
            td3 = tr[i].getElementsByTagName("td")[2];
            if (td1 || td2 || td3) {
                if ((td1.innerHTML.toUpperCase().indexOf(filter) > -1) || (td2.innerHTML.toUpperCase().indexOf(filter) > -1) || (td3.innerHTML.toUpperCase().indexOf(filter) > -1)) {
                    tr[i].style.display = "";
                } else {
                    tr[i].style.display = "none";
                }
            }
        }
    }
</script>

@{
    ViewBag.Title = "Products";
}
<h2>@ViewBag.Title</h2>
<p>
    @(String.IsNullOrWhiteSpace(Model.Search) ? "Showing all" : "You search for " + Model.Search + " found")  @Model.Products.TotalItemCount products
</p>

<div>
    @Html.ActionLink("Create New", "Create")
</div>
<div style="margin:15px">
    <div style="float:left; margin-bottom:15px">
        @using (Html.BeginForm("Index", "Products", FormMethod.Get))
            {
            <label>Filter by category:</label>
            @Html.DropDownListFor(vm => vm.Category, Model.CatFilterItems, "All");
            <label>Sort by:</label>
            @Html.DropDownListFor(vm => vm.SortBy, new SelectList(Model.Sorts, "Value", "Key"), "Default")
            <input type="submit" value="Filter" />
            <input type="hidden" name="Search" id="Search" value="@Model.Search" />}
    </div>
    <div style="float:right; margin-bottom:15px">
        <label>Search through results:</label>
        <!-- This is to filter out table for values -->
        <input id="myInput" type="text" oninput="myFunction()" placeholder="Search for Products.." />
    </div>
</div>

<table id="myTable" class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Category)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().ProductName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Products.First().Price)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model.Products)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Category.CategoryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ProductName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Description)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ID })
            </td>
        </tr>
    }

</table>
<div>
    Page
    @(Model.Products.PageCount < Model.Products.PageNumber ? 0 : Model.Products.PageNumber)
    of
    @Model.Products.PageCount
    @Html.PagedListPager(Model.Products, page => Url.Action("Index", new
{
    category = @Model.Category,
    Search = @Model.Search,
    sortBy = @Model.SortBy,
    page
}))
</div>